import zmq
from google.cloud import translate_v2 as translate
from google.cloud import texttospeech
import os
import pygame

def receive_file():
    # Create a ZeroMQ context
    context = zmq.Context()

    # Create a REP (reply) socket
    socket = context.socket(zmq.REP)
    socket.bind("tcp://10.0.1.102:5000")

    print("Waiting for a connection...")

    # Receive file data
    with open('received_file.txt', 'wb') as file:
        while True:
            # Wait for the next request from client
            data = socket.recv()
            if data == b"END":
                break
            file.write(data)
            # Send an acknowledgment back to the client
            socket.send(b"ACK")

    print("File received successfully")
    socket.close()
    context.term()

def translate_text(text, target_language):
    os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = '/home/ml/Downloads/my-first-project-424303-336fcb4c7878.json'
    translate_client = translate.Client()
    result = translate_client.translate(text, target_language=target_language)
    return result['translatedText']

def text_to_speech(text, output_file):
    client = texttospeech.TextToSpeechClient()

    # Set the text input to be synthesized
    synthesis_input = texttospeech.SynthesisInput(text=text)

    # Build the voice request, select the language code ("cmn-CN") and the name ("cmn-CN-Standard-B")
    voice = texttospeech.VoiceSelectionParams(
        language_code="cmn-CN",
        name="cmn-CN-Standard-B"
    )

    # Select the type of audio file you want returned
    audio_config = texttospeech.AudioConfig(
        audio_encoding=texttospeech.AudioEncoding.MP3
    )

    # Perform the text-to-speech request
    response = client.synthesize_speech(
        input=synthesis_input, voice=voice, audio_config=audio_config
    )

    # The response's audio_content is binary.
    with open(output_file, "wb") as out:
        # Write the response to the output file.
        out.write(response.audio_content)
        print(f'Audio content written to file "{output_file}"')

def play_audio(file_path):
    # Initialize pygame mixer
    pygame.mixer.init()
    # Load the mp3 file
    pygame.mixer.music.load(file_path)
    # Play the mp3 file
    pygame.mixer.music.play()

    # Wait until the file is played
    while pygame.mixer.music.get_busy():
        pygame.time.Clock().tick(10)

if __name__ == "__main__":
    # Step 1: Receive the file
    receive_file()

    # Step 2: Read the received file
    with open('received_file.txt', 'r', encoding='utf-8') as file:
        text = file.read()

    # Step 3: Translate the text
    target_language1 = "zh"
    translated_text1 = translate_text(text, target_language1)
    print(f"Original text: {text}")
    print(f"Translated text: {translated_text1}")

    # Step 4: Convert translated text to speech
    output_mp3_file = "output.mp3"
    text_to_speech(translated_text1, output_mp3_file)

    # Step 5: Play the audio file
    play_audio(output_mp3_file)